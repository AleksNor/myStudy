import UIKit

/*
 1
 
 1)Напишите замыкание, которое производит вывод на консоль сообщения "Hello, World!".
 2)Вызовите данное замыкание
 3)Какой тип данных у данного замыкания?
 */

var greeetingClous: ()-> (Void) = {
    print("Hello, World")
}
greeetingClous()

/*
 2
 
 Из представленных ниже функциональных типов укажите те, которые указывают на то:

 1) что функция/замыкание не принимает входных аргументов и ничего не возвращает
 2) что функция принимает один входной аргумент
 3) что функция возвращает значение
 
 () -> (:)
 (_) -> ()
 32(Int) -> () -> ()
 1() -> Void
 3() -> (String)
 1() -> ()
 */


/*
 3
 
 1) Напишите замыкание, которое принимает на вход параметр типа String и выводит его значение на консоль.
 2) Вызовите данное замыкание
 3) Какой тип данных у данного замыкания?
 */

var stringClosure: (String) -> () = {
    print($0)
}
stringClosure("kek kek")

/*
 4
 
 1) Напишите замыкание, которое принимает на вход два целочисленных параметра и возвращает их сумму.
 2) Протестируйте работу данного замыкания
 3) Какой тип данных будет у данного замыкания?
 */

var sumClosure: (_: Int, _:Int) -> Int = {$0 + $1}
sumClosure(5, 15)

/*
 5
 
 1) Напишите замыкание типа (Int, Int) -> Int, которое высчитывает разность двух переданных ему чисел.
 2) Напишите функцию, которая принимает на вход два целочисленных параметра, а так же замыкание типа (Int, Int) -> Int. Данное замыкание (третий аргумент функции) должно определять операцию, которая будет производиться в теле функции.
 3) Вызовите данную функцию и передайте ей два целых числа, а так же написанное в шаге 1 замыкание.
 4) Вызовите данную функцию и передайте ей два целых числа, а так же замыкание, производящее умножение данных чисел. Причем замыкание должно передаваться не через промежуточный параметр-хранилище, а непосредственно в качестве аргумента
 */

var subClosure: (Int, Int) -> Int = {$0 - $1}
func subFunc (_ a: Int,_ b: Int,_ closure: (Int,Int) -> Int) -> Int {
    return closure(a, b)
}
print(subFunc(43, 33, -))

/*
 9
 
 Вам дан массив целочисленных значений
 let arrayOfInt = [2,55,1,2,77,24,1,2]
 Отсортируйте его элементы по убыванию и выведите на консоль
 */

let arrayOfInt = [2,55,1,2,77,24,1,2]
var sortedArray = arrayOfInt.sorted(){$0 < $1}
print(sortedArray)
